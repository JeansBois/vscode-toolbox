{
  "name": "devtoolkit",
  "displayName": "%displayName%",
  "description": "%description%",
  "version": "0.2.0",
  "publisher": "devtoolkit",
  "private": true,
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/username/devtoolkit"
  },
  "homepage": "https://github.com/username/devtoolkit#readme",
  "bugs": {
    "url": "https://github.com/username/devtoolkit/issues"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Programming Languages",
    "Snippets",
    "Productivity",
    "Other",
    "Formatters"
  ],
  "keywords": [
    "python",
    "scripts",
    "tools",
    "development",
    "checklist",
    "automation",
    "code-quality",
    "workflow",
    "devops"
  ],
  "icon": "media/icon.svg",
  "activationEvents": [
    "onCommand:devtoolkit.openPanel",
    "onView:devtoolkit-scripts",
    "onView:devtoolkit-checklist",
    "workspaceContains:**/*.py",
    "onLanguage:python"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "%configuration.title%",
      "properties": {
        "devtoolkit.pythonPath": {
          "type": "string",
          "default": "python",
          "description": "%configuration.pythonPath.description%",
          "pattern": "^[^\\s]+$",
          "patternErrorMessage": "%configuration.pythonPath.patternErrorMessage%"
        },
        "devtoolkit.scriptsDirectory": {
          "type": "string",
          "default": "${extensionPath}/scripts",
          "description": "%configuration.scriptsDirectory.description%",
          "markdownDescription": "Main directory for scripts. Supports the following variables:\n- `${extensionPath}`: Path to the extension\n- `${workspaceFolder}`: Path to the opened workspace\n- `${globalStoragePath}`: Path to global storage\n- `${home}`: User's home directory"
        },
        "devtoolkit.globalStorage": {
          "type": "boolean",
          "default": true,
          "description": "%configuration.globalStorage.description%",
          "markdownDescription": "Use global storage for dependencies. When `true`, dependencies are installed in a global location shared across workspaces."
        },
        "devtoolkit.logging.level": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "enumDescriptions": [
            "%configuration.logging.level.debug%",
            "%configuration.logging.level.info%",
            "%configuration.logging.level.warn%",
            "%configuration.logging.level.error%"
          ],
          "default": "info",
          "description": "%configuration.logging.level.description%"
        },
        "devtoolkit.logging.file": {
          "type": "boolean",
          "default": true,
          "description": "%configuration.logging.file.description%"
        },
        "devtoolkit.logging.console": {
          "type": "boolean",
          "default": true,
          "description": "%configuration.logging.console.description%"
        },
        "devtoolkit.logging.directory": {
          "type": "string",
          "default": "${globalStoragePath}/logs",
          "description": "%configuration.logging.directory.description%",
          "markdownDescription": "Directory for log files. Supports the following variables:\n- `${extensionPath}`: Path to the extension\n- `${workspaceFolder}`: Path to the opened workspace\n- `${globalStoragePath}`: Path to global storage\n- `${home}`: User's home directory"
        },
        "devtoolkit.templates.directory": {
          "type": "string",
          "default": "${extensionPath}/templates",
          "description": "%configuration.templates.directory.description%",
          "markdownDescription": "Directory for script templates. Defines where the extension looks for script templates. Supports variables like `${extensionPath}`."
        },
        "devtoolkit.templates.defaultTemplate": {
          "type": "string",
          "default": "base.py",
          "description": "%configuration.templates.defaultTemplate.description%"
        },
        "devtoolkit.templates.customTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%configuration.templates.customTemplates.description%",
          "markdownDescription": "List of custom templates. Include file names relative to the templates directory.\n\nExample: `[\"custom_template.py\", \"subfolder/another_template.py\"]`"
        },
        "devtoolkit.security.allowedPaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "${extensionPath}",
            "${workspaceFolder}"
          ],
          "description": "%configuration.security.allowedPaths.description%",
          "markdownDescription": "Allowed paths for script execution. Scripts outside these paths cannot be executed for security reasons.\n\nSupports variables: `${extensionPath}`, `${workspaceFolder}`, `${globalStoragePath}`, `${home}`."
        },
        "devtoolkit.security.blockedExtensions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            ".exe",
            ".dll",
            ".so",
            ".dylib",
            ".bat",
            ".cmd",
            ".sh"
          ],
          "description": "%configuration.security.blockedExtensions.description%",
          "markdownDescription": "Blocked file extensions. Files with these extensions will not be executed, even if they are in allowed paths.\n\nDefault blocks common executable formats across platforms."
        },
        "devtoolkit.workspace.scriptDirectories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%configuration.workspace.scriptDirectories.description%",
          "scope": "resource"
        },
        "devtoolkit.workspace.templateLocations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%configuration.workspace.templateLocations.description%",
          "scope": "resource"
        },
        "devtoolkit.workspace.environmentVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "%configuration.workspace.environmentVariables.description%",
          "markdownDescription": "Workspace-specific environment variables. These variables will be available to scripts run in the current workspace.\n\nExample: `{\"API_KEY\": \"your-key\", \"DEBUG\": \"true\"}`",
          "scope": "resource"
        },
        "devtoolkit.workspace.pythonEnvironment.useVirtualEnv": {
          "type": "boolean",
          "default": false,
          "description": "%configuration.workspace.pythonEnvironment.useVirtualEnv.description%",
          "scope": "resource"
        },
        "devtoolkit.workspace.pythonEnvironment.virtualEnvPath": {
          "type": "string",
          "default": "",
          "description": "%configuration.workspace.pythonEnvironment.virtualEnvPath.description%",
          "scope": "resource"
        },
        "devtoolkit.workspace.pythonEnvironment.requirementsPath": {
          "type": "string",
          "default": "",
          "description": "%configuration.workspace.pythonEnvironment.requirementsPath.description%",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "devtoolkit.openPanel",
        "title": "%command.openPanel.title%",
        "icon": "$(layout-panel)",
        "category": "DevToolkit"
      },
      {
        "command": "devtoolkit.runScript",
        "title": "%command.runScript.title%",
        "icon": "$(play)",
        "category": "DevToolkit"
      },
      {
        "command": "devtoolkit.addToChecklist",
        "title": "%command.addToChecklist.title%",
        "icon": "$(add)",
        "category": "DevToolkit"
      },
      {
        "command": "devtoolkit.testMessageValidation",
        "title": "%command.testMessageValidation.title%",
        "icon": "$(debug-alt)",
        "category": "DevToolkit"
      },
      {
        "command": "devtoolkit.createNewScript",
        "title": "%command.createNewScript.title%",
        "icon": "$(new-file)",
        "category": "DevToolkit"
      },
      {
        "command": "devtoolkit.refreshScriptsList",
        "title": "%command.refreshScriptsList.title%",
        "icon": "$(refresh)",
        "category": "DevToolkit"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "devtoolkit-sidebar",
          "title": "%viewsContainer.sidebar.title%",
          "icon": "media/icon.svg"
        }
      ]
    },
    "views": {
      "devtoolkit-sidebar": [
        {
          "id": "devtoolkit-scripts",
          "name": "%view.scripts.name%",
          "icon": "media/icon.svg",
          "contextualTitle": "%view.scripts.contextualTitle%"
        },
        {
          "id": "devtoolkit-checklist",
          "name": "%view.checklist.name%",
          "icon": "media/icon.svg",
          "contextualTitle": "%view.checklist.contextualTitle%"
        }
      ]
    },
    "menus": {
      "explorer/context": [
        {
          "command": "devtoolkit.runScript",
          "when": "resourceExtname == .py",
          "group": "DevToolkit@1"
        },
        {
          "command": "devtoolkit.addToChecklist",
          "group": "DevToolkit@2"
        }
      ],
      "view/title": [
        {
          "command": "devtoolkit.refreshScriptsList",
          "when": "view == devtoolkit-scripts",
          "group": "navigation"
        },
        {
          "command": "devtoolkit.createNewScript",
          "when": "view == devtoolkit-scripts",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "devtoolkit.runScript",
          "when": "editorLangId == python"
        },
        {
          "command": "devtoolkit.testMessageValidation",
          "when": "devtoolkit.developerMode"
        }
      ]
    },
    "keybindings": [
      {
        "command": "devtoolkit.openPanel",
        "key": "ctrl+shift+d",
        "mac": "cmd+shift+d",
        "when": "!editorFocus"
      },
      {
        "command": "devtoolkit.runScript",
        "key": "f5",
        "when": "editorLangId == python && editorFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run clean && webpack --mode production",
    "compile": "webpack --mode development",
    "clean": "rimraf out dist",
    "watch": "webpack --mode development --watch",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./dist/test/runTest.js",
    "test:unit": "mocha --require ts-node/register 'src/test/suite/**/*.test.ts'",
    "test:integration": "mocha --require ts-node/register 'src/test/integration/**/*.test.ts'",
    "test:coverage": "nyc npm run test:unit && nyc npm run test:integration",
    "test:python": "python -m pytest templates/test/",
    "test:all": "npm run test:coverage && npm run test:python",
    "build-dev": "webpack --mode development",
    "build-prod": "webpack --mode production",
    "setup": "npm install && mkdir -p dist && npm run copy-styles && npm run build-dev"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "^16.x",
    "@types/sinon": "^17.0.2",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "@vscode/codicons": "^0.0.36",
    "@vscode/test-electron": "^2.3.8",
    "css-loader": "^7.1.2",
    "eslint": "^8.56.0",
    "glob": "^10.3.10",
    "mocha": "^10.2.0",
    "nyc": "^15.1.0",
    "sinon": "^17.0.1",
    "style-loader": "^4.0.0",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3",
    "webpack": "^5.97.1",
    "webpack-cli": "^6.0.1"
  },
  "copy-styles": "mkdir -p dist && cp -r src/webview/styles/*.css dist/",
  "dependencies": {
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@types/semver": "^7.5.8",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "semver": "^7.7.1",
    "simple-git": "^3.27.0"
  },
  "l10n": "./l10n"
}
